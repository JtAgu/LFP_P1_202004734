# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from AnalizadorLexico import AnalizadorLexico
from PyQt5.QtWidgets import QFileDialog, QMessageBox , QListView
from PyQt5.QtGui import QIcon, QImage, QPixmap
from PyQt5.QtGui import * 
from PyQt5.QtCore import * 
from Canciones import Cancion
from pygame import mixer 
import time


import copy
import webbrowser
import os

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.scanner = AnalizadorLexico()
        self.ruta=""
        self.rutaMusicaActual=""
        self.idMusica=0
        self.Canciones=[]
        MainWindow.setObjectName("REPRODUCTOR")
        MainWindow.resize(829, 552)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Cargar_BTN = QtWidgets.QPushButton(self.centralwidget)
        self.Cargar_BTN.setGeometry(QtCore.QRect(530, 10, 131, 51))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(12)
        self.Cargar_BTN.setFont(font)
        self.Cargar_BTN.setObjectName("Cargar_BTN")
        self.Cargar_BTN.clicked.connect(self.CargarArchivo)
    
        self.Analizar_BTN = QtWidgets.QPushButton(self.centralwidget)
        self.Analizar_BTN.setGeometry(QtCore.QRect(680, 10, 131, 51))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(12)
        self.Analizar_BTN.setFont(font)
        self.Analizar_BTN.setObjectName("Analizar_BTN")
        self.Analizar_BTN.clicked.connect(self.AnalizarArchivo)

        self.Imagen = QtWidgets.QLabel(self.centralwidget)
        self.Imagen.setGeometry(QtCore.QRect(20, 70, 590, 260))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(12)
        self.Imagen.setFont(font)
        self.Imagen.setObjectName("Imagen")
        
        
        
        self.Prev_BTN = QtWidgets.QPushButton(self.centralwidget)
        self.Prev_BTN.setGeometry(QtCore.QRect(70, 480, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(12)
        self.Prev_BTN.setFont(font)
        self.Prev_BTN.setObjectName("Prev_BTN")
        self.Prev_BTN.clicked.connect(self.PrevMusica)

        self.Next_BTN = QtWidgets.QPushButton(self.centralwidget)
        self.Next_BTN.setGeometry(QtCore.QRect(470, 480, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(12)
        self.Next_BTN.setFont(font)
        self.Next_BTN.setObjectName("Next_BTN")
        self.Next_BTN.clicked.connect(self.NextMusica)

        self.Pause_BTN = QtWidgets.QPushButton(self.centralwidget)
        self.Pause_BTN.setGeometry(QtCore.QRect(170, 480, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(12)
        self.Pause_BTN.setFont(font)
        self.Pause_BTN.setObjectName("Pause_BTN")
        self.Pause_BTN.clicked.connect(self.pauseMusica)

        self.Play_BTN = QtWidgets.QPushButton(self.centralwidget)
        self.Play_BTN.setGeometry(QtCore.QRect(270, 480, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(12)
        self.Play_BTN.setFont(font)
        self.Play_BTN.setObjectName("Play_BTN")
        self.Play_BTN.clicked.connect(self.PlayMusica)

        self.Stop_BTN = QtWidgets.QPushButton(self.centralwidget)
        self.Stop_BTN.setGeometry(QtCore.QRect(370, 480, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(12)
        self.Stop_BTN.setFont(font)
        self.Stop_BTN.setObjectName("Stop_BTN")
        self.Stop_BTN.clicked.connect(self.StopMusica)

        self.informacion_Area = QtWidgets.QTextEdit(self.centralwidget)
        self.informacion_Area.setGeometry(QtCore.QRect(20, 350, 591, 121))
        font = QtGui.QFont()
        font.setFamily("Technic")
        font.setPointSize(11)
        self.informacion_Area.setFont(font)
        self.informacion_Area.setObjectName("informacion_Area")
        self.informacion_Area.setReadOnly(True)

        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        
        self.listWidget.setGeometry(QtCore.QRect(630, 70, 181, 461))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(10)
        self.listWidget.setFont(font)
        self.listWidget.setObjectName("ListaCanciones")
        self.Reporte_BTN = QtWidgets.QPushButton(self.centralwidget)
        self.Reporte_BTN.setGeometry(QtCore.QRect(380, 10, 131, 51))
        font = QtGui.QFont()
        font.setFamily("Terminal")
        font.setPointSize(12)
        self.Reporte_BTN.setFont(font)
        self.Reporte_BTN.setObjectName("Reporte_BTN")
        self.Reporte_BTN.clicked.connect(self.ReporteError)

        self.Reporte_BTN.setDisabled(True)
        self.Analizar_BTN.setDisabled(True)
        self.Play_BTN.setDisabled(True)
        self.Pause_BTN.setDisabled(True)
        self.Stop_BTN.setDisabled(True)
        self.Prev_BTN.setDisabled(True)
        self.Next_BTN.setDisabled(True)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Cargar_BTN.setText(_translate("MainWindow", "CARGAR"))
        self.Analizar_BTN.setText(_translate("MainWindow", "ANALIZAR"))
        self.Imagen.setText(_translate("MainWindow", "MUSICA"))
        pixmap = QPixmap('musica.png')
        self.Imagen.setPixmap(pixmap)
        self.Prev_BTN.setText(_translate("MainWindow", "PREV"))
        self.Next_BTN.setText(_translate("MainWindow", "NEXT"))
        self.Pause_BTN.setText(_translate("MainWindow", "PAUSE"))
        self.Play_BTN.setText(_translate("MainWindow", "PLAY"))
        self.Stop_BTN.setText(_translate("MainWindow", "STOP"))
        MainWindow.setWindowTitle("REPRODUCTOR MP3")
        
        self.listWidget.addItem("LISTA DE CANCIONES")
        
        self.informacion_Area.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Technic\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">INFORMACION</p></body></html>"))
        self.Reporte_BTN.setText(_translate("MainWindow", "REPORTE"))

    def CargarArchivo(self):
        buscar = QFileDialog.getOpenFileName()
        size=len(buscar[0])
        final=""
        self.ruta=buscar[0]
        for x in buscar[0]:
            if size<5:
                final+=x
            size-=1
        if final==".mt3":
            msg=QMessageBox()
            msg.setWindowTitle("SUCCES")
            msg.setText("Extension de archivo aceptado")
            msg.setIcon(QMessageBox.Information)
            x=msg.exec_()
            self.Analizar_BTN.setDisabled(False)
        else:
            msg=QMessageBox()
            msg.setWindowTitle("OCURRIO UN ERROR")
            msg.setText("Extension de archivo incorrecta")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec_()
    
    def AnalizarArchivo(self):
        codigo_fuente = open(self.ruta, 'r')
        contenido = codigo_fuente.read()
        codigo_fuente.close()            
            
        self.scanner.analizar(contenido)
        self.scanner.impTokens()
        print("======================================================================")
        print("======================================================================")
        self.scanner.impErrores()
        self.Analizar_BTN.setDisabled(True)
        self.Play_BTN.setDisabled(False)
        self.Reporte_BTN.setDisabled(False)
        i=0
        estado=0
        nombre=''
        artista=''
        rutaCancion=''
        genero=''
        repetir=''
        anio=''
        while i<len(self.scanner.listaTokens):
            if estado==0:    
                if self.scanner.listaTokens[i].tipo=="LlaveA":
                    estado=1
            elif estado==1:
                if self.scanner.listaTokens[i].tipo=="NOMBRE":
                    i+=2
                    nombre=self.scanner.listaTokens[i].lexema
                    
                elif self.scanner.listaTokens[i].tipo=="ARTISTA":
                    i+=2
                    artista=self.scanner.listaTokens[i].lexema
                    
                elif self.scanner.listaTokens[i].tipo=="RUTA":
                    i+=2
                    rutaCancion=self.scanner.listaTokens[i].lexema
                    
                elif self.scanner.listaTokens[i].tipo=="GENERO":
                    i+=2
                    genero=self.scanner.listaTokens[i].lexema
                    
                elif self.scanner.listaTokens[i].tipo=="REPETIR":
                    i+=2
                    repetir=self.scanner.listaTokens[i].lexema
                    
                elif self.scanner.listaTokens[i].tipo=="ANIO":
                    i+=2
                    anio=self.scanner.listaTokens[i].lexema
                    
                elif self.scanner.listaTokens[i].tipo=="LlaveC":
                    Song=Cancion(nombre,artista,anio,repetir,rutaCancion,genero)
                    print(Song.nombre)
                    self.Canciones.append(Song)
                    estado=0
            i+=1
        info=""
        for x in self.Canciones:
            self.listWidget.addItem(x.nombre)
        
            
        
    def PlayMusica(self):
        if self.Stop_BTN.isEnabled():
            mixer.music.unpause()
            self.Pause_BTN.setDisabled(False)
            self.Play_BTN.setDisabled(True)
        else:
            self.idMusica=0
            ruta=self.Canciones[self.idMusica].rutaCancion+""
            mixer.init()
            mixer.music.load(ruta)
            mixer.music.play()
            info="INFORMACION\nNOMBRE:\t"+self.Canciones[self.idMusica].nombre+"\nARTISTA:\t"+self.Canciones[self.idMusica].artista+"\nGENERO:\t"+self.Canciones[self.idMusica].genero+"\nAÑO:\t"+self.Canciones[self.idMusica].anio
            self.informacion_Area.setText(info)
            self.Play_BTN.setDisabled(True)
            self.Stop_BTN.setDisabled(False)
            self.Prev_BTN.setDisabled(False)
            self.Next_BTN.setDisabled(False)
            self.Pause_BTN.setDisabled(False)
            

    def StopMusica(self):
        mixer.music.stop()
        self.Stop_BTN.setDisabled(True)
        self.Prev_BTN.setDisabled(True)
        self.Next_BTN.setDisabled(True)
        self.Pause_BTN.setDisabled(True)
        self.Play_BTN.setDisabled(False)
        

    def pauseMusica(self):
        mixer.music.pause()
        self.Pause_BTN.setDisabled(True)
        self.Play_BTN.setDisabled(False)
    
    def NextMusica(self):
        mixer.music.stop()
        mixer.music.unload()
        self.Pause_BTN.setDisabled(False)
        self.Play_BTN.setDisabled(True)
        self.idMusica+=1
        if self.idMusica==len(self.Canciones):
            self.idMusica=0
        ruta=self.Canciones[self.idMusica].rutaCancion+""
        info="INFORMACION\nNOMBRE:\t"+self.Canciones[self.idMusica].nombre+"\nARTISTA:\t"+self.Canciones[self.idMusica].artista+"\nGENERO:\t"+self.Canciones[self.idMusica].genero+"\nAÑO:\t"+self.Canciones[self.idMusica].anio
        self.informacion_Area.setText(info)
        mixer.init()
        mixer.music.load(ruta)
        mixer.music.play()

    def PrevMusica(self):
        mixer.music.stop()
        mixer.music.unload()
        self.Pause_BTN.setDisabled(False)
        self.Play_BTN.setDisabled(True)
        self.idMusica-=1
        if self.idMusica<0:
            self.idMusica=len(self.Canciones)-1
        ruta=self.Canciones[self.idMusica].rutaCancion
        info="INFORMACION\nNOMBRE:\t"+self.Canciones[self.idMusica].nombre+"\nARTISTA:\t"+self.Canciones[self.idMusica].artista+"\nGENERO:\t"+self.Canciones[self.idMusica].genero+"\nAÑO:\t"+self.Canciones[self.idMusica].anio
        self.informacion_Area.setText(info)
        mixer.init()
        mixer.music.load(ruta)
        mixer.music.play()

        
    def ReportesTokens(self):
        contenido=""
        file=open('Tokens.html','w')
        c=0
        contenido="""<!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>REPORTE</title>
        </head>
        <body>

        <center><h1>REPORTE DE TOKENS</h1></center><br>
        <div WIDTH='700'>
        <table class='table table-striped table-hover'  border='1'style='margin-left:auto;margin-right:auto;margin-top:auto;'><tbody>
        <tr><th>Lexema</th><th>Tipo</th><th>Linea</th><th>Columna</th></tr>"""
        for x in self.scanner.listaTokens:
            contenido+='<tr><td>'+str(x.lexema)+'</td>'
            contenido+='<td>'+str(x.tipo)+'</td>'
            contenido+='<td>'+str(x.linea)+'</td>'
            contenido+='<td>'+str(x.columna)+'</td></tr>'
        contenido+='</tbody></table>'
        contenido+='</body></div></html>'
        try:
            file.write(contenido)
        except:
            print("Ocurrio un error")
        finally:
            file.close()
            webbrowser.open_new_tab("Tokens.html")
        

    def ReporteError(self):
        contenido=""
        c=0
        
        file=open('Errores.html','w')
        contenido="""<!DOCTYPE html>
        <html lang="en">
        <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
        <title>REPORTE ERRORES</title>
        </head>
        <body><center><h1>REPORTE DE ERRORES</h1></center><br>
        <div WIDTH='700'>
        <table class='table table-striped table-hover'  border='1'style='margin-left:auto;margin-right:auto;margin-top:auto;'><tbody>
        <tr><th>Lexema</th><th>Tipo</th><th>Linea</th><th>Columna</th></tr>"""
        for x in self.scanner.listaErrores:
            contenido+='<tr><td>'+str(x.descripcion)+'</td>'
            contenido+='<td>'+str(x.tipo)+'</td>'
            contenido+='<td>'+str(x.linea)+'</td>'
            contenido+='<td>'+str(x.columna)+'</td></tr>'
        contenido+='</tbody></table>'
        contenido+='</body></div></html>'
        try:
            file.write(contenido)
        except:
            print("Ocurrio un error")
        finally:
            file.close()
            webbrowser.open_new_tab('Errores.html')
            self.ReportesTokens()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
